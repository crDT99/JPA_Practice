package com.mycompany.proyectopeluqueriacanina.igu;

import com.mycompany.proyectopeluqueriacanina.logica.ControladoraLogica;
import com.mycompany.proyectopeluqueriacanina.logica.Mascota;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VerDatos extends javax.swing.JFrame {

    //Instancia de la controladora Logica (buena practica en jframe inicializar en null)
    ControladoraLogica controlL = null;
    
    /**
     * Creates new form VerDatos
     */
    public VerDatos() {
        controlL = new ControladoraLogica();
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Titulo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMascotas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btn_Editar = new javax.swing.JButton();
        btn_Eliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Titulo.setFont(new java.awt.Font("Dialog", 0, 60)); // NOI18N
        Titulo.setText("Visualizaci√≥n De Datos");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tablaMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaMascotas);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Datos de Mascotas: ");

        btn_Editar.setIcon(new javax.swing.ImageIcon("C:\\Users\\USUARIO\\Desktop\\e64.png")); // NOI18N
        btn_Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EditarActionPerformed(evt);
            }
        });

        btn_Eliminar.setIcon(new javax.swing.ImageIcon("C:\\Users\\USUARIO\\Desktop\\d64.png")); // NOI18N
        btn_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 974, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_Eliminar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_Editar, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_Eliminar)
                        .addGap(49, 49, 49)
                        .addComponent(btn_Editar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Titulo)
                .addGap(312, 312, 312))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(Titulo)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EliminarActionPerformed
       // Se verifica que la tabla no este vacia
        if(tablaMascotas.getRowCount()>0){
            // Se verifica que se haya seleccionado alguna fila
           if(tablaMascotas.getSelectedRow()!= -1){
               //obtener ID de la mascota para eliminar
               int num_Cliente = Integer.parseInt(String.valueOf(tablaMascotas.getValueAt(tablaMascotas.getSelectedRow(), 0)));
              
               //llamar metodo para eliminar
               controlL.borrarMascota(num_Cliente);
               
               //Recargar la tabla con los nuevos datos
               cargarTabla();
               
               //mensaje al usuario de borrado exitoso
               mostrarMensaje("Mascota eliminada correctamente", "Info" , "Borrado de Mascota");
               
           }else{mostrarMensaje("No se ha seleccionado Ninguna Mascota", "Error" , "Error al Eliminar");}
           
       } else{mostrarMensaje("No hay nada para eliminar en la Tabla", "Error" , "Error al Eliminar");} 
    }//GEN-LAST:event_btn_EliminarActionPerformed

    
    public void mostrarMensaje(String mensaje, String tipoMensaje, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        
        if(tipoMensaje.equals("Info")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        }else if(tipoMensaje.equals("Error")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
        
    }

    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cargarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void btn_EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EditarActionPerformed
       
        // Se verifica que la tabla no este vacia
        if(tablaMascotas.getRowCount()>0){
            // Se verifica que se haya seleccionado alguna fila
           if(tablaMascotas.getSelectedRow()!= -1){
               //obtener ID de la mascota para Editar
               int num_Cliente = Integer.parseInt(String.valueOf(tablaMascotas.getValueAt(tablaMascotas.getSelectedRow(), 0)));
               
                //abrir ventana de Modificacion
               ModificarDatos pantallaMod = new ModificarDatos(num_Cliente);
               pantallaMod.setVisible(true);
               pantallaMod.setLocationRelativeTo(null);
               
           }else{mostrarMensaje("No se ha seleccionado Ninguna Mascota", "Error" , "Error al Eliminar");}
           
       } else{mostrarMensaje("No hay nada para eliminar en la Tabla", "Error" , "Error al Eliminar");} 
        
    }//GEN-LAST:event_btn_EditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton btn_Editar;
    private javax.swing.JButton btn_Eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaMascotas;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
       //Definir el modelo que queremos que tenga la tabla
       DefaultTableModel tablaModel = new DefaultTableModel(){
           //hace que filas y columnas no sean editables
           @Override
           public boolean isCellEditable(int row, int column){
               return false;
           }
       };
       
       
       //establecer nombre de columnas
       String titulos[] = {"Num" , "Nombre" , "Color" , "Raza ", "Alergico", "At. Esp.", "Due√±o", "Cell"};
       tablaModel.setColumnIdentifiers(titulos);
       
       //Carga los datos desde la base de datos
        List <Mascota> listaMascotas =  controlL.traerMascotas();
        
       //Recorrer lista y enviar a graficar elementos en la tabla
       if(listaMascotas != null){
           for(Mascota pet : listaMascotas){
               Object[] mascota = {pet.getNum_cliente(), pet.getNombre(), pet.getColor(), pet.getRaza(),pet.getAlergico(),
                   pet.getAtencion_especial(), pet.getPetOwner().getNombreOwner() , pet.getPetOwner().getCelOwner()};
               tablaModel.addRow(mascota);
           }
       }
       tablaMascotas.setModel(tablaModel);
             
    }
}
